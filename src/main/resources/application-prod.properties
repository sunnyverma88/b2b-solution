server.port=${PORT:8080}
spring.thymeleaf.enabled=false
spring.main.allow-bean-definition-overriding=true
spring.thymeleaf.cache=false
#======================
#	Data source
#======================
spring.datasource.url=jdbc:postgresql://${rds.hostname}:${rds.port}/${rds.db.name}
# Username and password
spring.datasource.username=${rds.username}
spring.datasource.password=${rds.password}
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.tomcat.test-while-idle= true
#spring.datasource.tomcat.validation-query= SELECT 1
# Show or not log for each sql query
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# ===============================
# = JPA / HIBERNATE
# ===============================
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.flyway.baselineOnMigrate=true
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
sendgrid.api.key=${SENDGRID_API_KEY}
base.url.path=http://apprize-prod.herokuapp.com/

